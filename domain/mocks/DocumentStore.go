// Code generated by mockery v2.33.2. DO NOT EDIT.

package mocks

import (
	domain "github.com/connorb645/appeak-go/domain"
	mock "github.com/stretchr/testify/mock"
)

// DocumentStore is an autogenerated mock type for the DocumentStore type
type DocumentStore struct {
	mock.Mock
}

// Fetch provides a mock function with given fields: id
func (_m *DocumentStore) Fetch(id string) (*domain.Document, error) {
	ret := _m.Called(id)

	var r0 *domain.Document
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*domain.Document, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) *domain.Document); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Document)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FetchAll provides a mock function with given fields:
func (_m *DocumentStore) FetchAll() ([]domain.Document, error) {
	ret := _m.Called()

	var r0 []domain.Document
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]domain.Document, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []domain.Document); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Document)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewDocumentStore creates a new instance of DocumentStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDocumentStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *DocumentStore {
	mock := &DocumentStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
